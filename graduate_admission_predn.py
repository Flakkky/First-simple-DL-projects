# -*- coding: utf-8 -*-
"""Graduate admission predn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10LqyAhXKxvEQW47R1o5HP7I_Qk3zN7o6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

import tensorflow
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

df = pd.read_csv('/content/admission_data.csv')
df.head()

df['Chance of Admit '] = (df['Chance of Admit '] > 0.5).astype(int)
df.head()

df['Chance of Admit '].value_counts()

def step(X):
  if (X>0.5):
    return 1
  else:
     return 0

X = df.drop(columns=['Chance of Admit '])
y = df.iloc[:,-1]
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2 , random_state= 0)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = Sequential()

model.add(Dense(7 , activation = 'relu', input_dim = 7))
model.add(Dense(3,activation = 'relu'))
model.add(Dense(1,activation = 'sigmoid'))

model.summary()

model.compile(loss='binary_crossentropy',optimizer = 'Adam', metrics =['accuracy'])
history = model.fit(X_train_scaled,y_train,batch_size=50,epochs=100,verbose=1,validation_split=0.2)

y_pred = model.predict(X_test)

accuracy_score(y_test,y_pred)



plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

